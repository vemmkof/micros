

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Dec 10 23:08:56 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  0088                     	;# 
    61  0089                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  008F                     	;# 
    66  0090                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0093                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  0105                     	;# 
    85  0107                     	;# 
    86  0108                     	;# 
    87  0109                     	;# 
    88  010C                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  0185                     	;# 
    94  0187                     	;# 
    95  0188                     	;# 
    96  0189                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99                           
   100                           	psect	idataBANK0
   101  0674                     __pidataBANK0:	
   102                           
   103                           ;initializer for main@F1727
   104  0674  3432               	retlw	50
   105  0675  3434               	retlw	52
   106  0676  344C               	retlw	76
   107  0677  3443               	retlw	67
   108  0678  3435               	retlw	53
   109  0679  3431               	retlw	49
   110  067A  3432               	retlw	50
   111  067B  3420               	retlw	32
   112  067C  3457               	retlw	87
   113  067D  342F               	retlw	47
   114  067E  3450               	retlw	80
   115  067F  3449               	retlw	73
   116  0680  3443               	retlw	67
   117  0681  3431               	retlw	49
   118  0682  3436               	retlw	54
   119  0683  3446               	retlw	70
   120  0684  3438               	retlw	56
   121  0685  3438               	retlw	56
   122  0686  3437               	retlw	55
   123  0687  3400               	retlw	0
   124                           
   125                           ;initializer for main@F1729
   126  0688  3453               	retlw	83
   127  0689  3449               	retlw	73
   128  068A  3432               	retlw	50
   129  068B  3443               	retlw	67
   130  068C  340A               	retlw	10
   131  068D  3400               	retlw	0
   132  0018                     _RCSTAbits	set	24
   133  0013                     _SSPBUF	set	19
   134  0014                     _SSPCON	set	20
   135  0019                     _TXREG	set	25
   136  0063                     _SSPIF	set	99
   137  0064                     _TXIF	set	100
   138  0099                     _SPBRG	set	153
   139  0093                     _SSPADD	set	147
   140  0094                     _SSPSTAT	set	148
   141  0098                     _TXSTAbits	set	152
   142  048D                     _ACKDT	set	1165
   143  048C                     _ACKEN	set	1164
   144  048A                     _PEN	set	1162
   145  048B                     _RCEN	set	1163
   146  0488                     _SEN	set	1160
   147  043B                     _TRISC3	set	1083
   148  043C                     _TRISC4	set	1084
   149                           
   150                           ; #config settings
   151  0000                     
   152                           	psect	cinit
   153  07F0                     start_initialization:	
   154  07F0                     __initialization:	
   155                           
   156                           ; Initialize objects allocated to BANK0
   157  07F0  1383               	bcf	3,7	;select IRP bank0
   158  07F1  303A               	movlw	low (__pdataBANK0+26)
   159  07F2  00FD               	movwf	btemp+-1
   160  07F3  3006               	movlw	high __pidataBANK0
   161  07F4  00FE               	movwf	btemp
   162  07F5  3074               	movlw	low __pidataBANK0
   163  07F6  00FF               	movwf	btemp+1
   164  07F7  3020               	movlw	low __pdataBANK0
   165  07F8  0084               	movwf	4
   166  07F9  120A  118A  2650   	fcall	init_ram0
   167  07FC                     end_of_initialization:	
   168                           ;End of C runtime variable initialization code
   169                           
   170  07FC                     __end_of__initialization:	
   171  07FC  0183               	clrf	3
   172  07FD  120A  118A  2F54   	ljmp	_main	;jump to C main() function
   173                           
   174                           	psect	dataBANK0
   175  0020                     __pdataBANK0:	
   176  0020                     main@F1727:	
   177  0020                     	ds	20
   178  0034                     main@F1729:	
   179  0034                     	ds	6
   180                           
   181                           	psect	inittext
   182  064C                     init_fetch0:	
   183                           ;	Called with low address in FSR and high address in W
   184                           
   185  064C  087E               	movf	126,w
   186  064D  008A               	movwf	10
   187  064E  087F               	movf	127,w
   188  064F  0082               	movwf	2
   189  0650                     init_ram0:	
   190                           ;Called with:
   191                           ;	high address of idata address in btemp 
   192                           ;	low address of idata address in btemp+1 
   193                           ;	low address of data in FSR
   194                           ;	high address + 1 of data in btemp-1
   195                           
   196  0650  264C  120A  118A   	fcall	init_fetch0
   197  0653  0080               	movwf	0
   198  0654  0A84               	incf	4,f
   199  0655  0804               	movf	4,w
   200  0656  067D               	xorwf	125,w
   201  0657  1903               	btfsc	3,2
   202  0658  3400               	retlw	0
   203  0659  0AFF               	incf	127,f
   204  065A  1903               	btfsc	3,2
   205  065B  0AFE               	incf	126,f
   206  065C  2E50               	goto	init_ram0
   207                           
   208                           	psect	cstackCOMMON
   209  0070                     __pcstackCOMMON:	
   210  0070                     ?_initUSART:	
   211  0070                     ??_initUSART:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ?_initI2C:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ??_initI2C:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ?_pageWrite:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ?_randomRead:	
   224                           ; 0 bytes @ 0x0
   225                           
   226  0070                     ?_writeUSART:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ??_writeUSART:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_main:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_waitMSSP:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ??_waitMSSP:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_setACK:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ??_setACK:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_setNACK:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ??_setNACK:	
   251                           ; 0 bytes @ 0x0
   252                           
   253  0070                     pageWrite@tam:	
   254                           ; 0 bytes @ 0x0
   255                           
   256  0070                     writeUSART@dato:	
   257                           ; 1 bytes @ 0x0
   258                           
   259                           
   260                           ; 1 bytes @ 0x0
   261  0070                     	ds	1
   262  0071                     ?_writeStringUSART:	
   263  0071                     ??_pageWrite:	
   264                           ; 0 bytes @ 0x1
   265                           
   266  0071                     ??_randomRead:	
   267                           ; 0 bytes @ 0x1
   268                           
   269  0071                     writeStringUSART@tam:	
   270                           ; 0 bytes @ 0x1
   271                           
   272                           
   273                           ; 1 bytes @ 0x1
   274  0071                     	ds	1
   275  0072                     ??_writeStringUSART:	
   276  0072                     pageWrite@data:	
   277                           ; 0 bytes @ 0x2
   278                           
   279  0072                     randomRead@tam:	
   280                           ; 1 bytes @ 0x2
   281                           
   282                           
   283                           ; 1 bytes @ 0x2
   284  0072                     	ds	1
   285  0073                     pageWrite@i:	
   286  0073                     randomRead@i:	
   287                           ; 1 bytes @ 0x3
   288                           
   289  0073                     writeStringUSART@dato:	
   290                           ; 1 bytes @ 0x3
   291                           
   292                           
   293                           ; 1 bytes @ 0x3
   294  0073                     	ds	1
   295  0074                     writeStringUSART@c:	
   296                           
   297                           ; 1 bytes @ 0x4
   298  0074                     	ds	1
   299  0075                     ??_main:	
   300                           
   301                           ; 0 bytes @ 0x5
   302  0075                     	ds	4
   303                           
   304                           	psect	cstackBANK0
   305  003A                     __pcstackBANK0:	
   306  003A                     main@data:	
   307                           
   308                           ; 20 bytes @ 0x0
   309  003A                     	ds	20
   310  004E                     main@msg:	
   311                           
   312                           ; 6 bytes @ 0x14
   313  004E                     	ds	6
   314                           
   315                           	psect	maintext
   316  0754                     __pmaintext:	
   317 ;;
   318 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   319 ;;
   320 ;; *************** function _main *****************
   321 ;; Defined at:
   322 ;;		line 24 in file "main.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;  data           20    0[BANK0 ] unsigned char [20]
   327 ;;  msg             6   20[BANK0 ] unsigned char [6]
   328 ;; Return value:  Size  Location     Type
   329 ;;		None               void
   330 ;; Registers used:
   331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : B00/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   337 ;;      Params:         0       0       0       0       0
   338 ;;      Locals:         0      26       0       0       0
   339 ;;      Temps:          4       0       0       0       0
   340 ;;      Totals:         4      26       0       0       0
   341 ;;Total ram usage:       30 bytes
   342 ;; Hardware stack levels required when called:    2
   343 ;; This function calls:
   344 ;;		_initI2C
   345 ;;		_initUSART
   346 ;;		_pageWrite
   347 ;;		_randomRead
   348 ;;		_writeStringUSART
   349 ;;		_writeUSART
   350 ;; This function is called by:
   351 ;;		Startup code after reset
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           
   356                           ;psect for function _main
   357  0754                     _main:	
   358                           
   359                           ;main.c: 26: unsigned char data[20] = {"24LC512 W/PIC16F887"};
   360                           
   361                           ;incstack = 0
   362                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   363  0754  303A               	movlw	main@data& (0+255)
   364  0755  0084               	movwf	4
   365  0756  3020               	movlw	low main@F1727
   366  0757  00F5               	movwf	??_main
   367  0758  0804               	movf	4,w
   368  0759  00F6               	movwf	??_main+1
   369  075A  3014               	movlw	20
   370  075B  00F7               	movwf	??_main+2
   371  075C                     u120:	
   372  075C  0875               	movf	??_main,w
   373  075D  0084               	movwf	4
   374  075E  1383               	bcf	3,7	;select IRP bank0
   375  075F  0800               	movf	0,w
   376  0760  00F8               	movwf	??_main+3
   377  0761  0AF5               	incf	??_main,f
   378  0762  0876               	movf	??_main+1,w
   379  0763  0084               	movwf	4
   380  0764  0878               	movf	??_main+3,w
   381  0765  0080               	movwf	0
   382  0766  0AF6               	incf	??_main+1,f
   383  0767  0BF7               	decfsz	??_main+2,f
   384  0768  2F5C               	goto	u120
   385                           
   386                           ;main.c: 27: unsigned char msg[] = "SI2C\n";
   387  0769  304E               	movlw	main@msg& (0+255)
   388  076A  0084               	movwf	4
   389  076B  1283               	bcf	3,5	;RP0=0, select bank0
   390  076C  1303               	bcf	3,6	;RP1=0, select bank0
   391  076D  0834               	movf	main@F1729,w
   392  076E  0080               	movwf	0
   393  076F  0A84               	incf	4,f
   394  0770  0835               	movf	main@F1729+1,w
   395  0771  0080               	movwf	0
   396  0772  0A84               	incf	4,f
   397  0773  0836               	movf	main@F1729+2,w
   398  0774  0080               	movwf	0
   399  0775  0A84               	incf	4,f
   400  0776  0837               	movf	main@F1729+3,w
   401  0777  0080               	movwf	0
   402  0778  0A84               	incf	4,f
   403  0779  0838               	movf	main@F1729+4,w
   404  077A  0080               	movwf	0
   405  077B  0A84               	incf	4,f
   406  077C  0839               	movf	main@F1729+5,w
   407  077D  0080               	movwf	0
   408                           
   409                           ;main.c: 30: initUSART();
   410  077E  120A  118A  2630  120A  118A  	fcall	_initUSART
   411                           
   412                           ;main.c: 31: writeStringUSART(msg, 5);
   413  0783  3005               	movlw	5
   414  0784  00F5               	movwf	??_main
   415  0785  0875               	movf	??_main,w
   416  0786  00F1               	movwf	writeStringUSART@tam
   417  0787  304E               	movlw	(low (main@msg| 0))& (0+255)
   418  0788  120A  118A  265D  120A  118A  	fcall	_writeStringUSART
   419                           
   420                           ;main.c: 32: initI2C();
   421  078D  120A  118A  263D  120A  118A  	fcall	_initI2C
   422                           
   423                           ;main.c: 33: _delay((unsigned long)((500)*(4000000/4000.0)));
   424  0792  3003               	movlw	3
   425  0793  00F7               	movwf	??_main+2
   426  0794  308A               	movlw	138
   427  0795  00F6               	movwf	??_main+1
   428  0796  3056               	movlw	86
   429  0797  00F5               	movwf	??_main
   430  0798                     u137:	
   431  0798  0BF5               	decfsz	??_main,f
   432  0799  2F98               	goto	u137
   433  079A  0BF6               	decfsz	??_main+1,f
   434  079B  2F98               	goto	u137
   435  079C  0BF7               	decfsz	??_main+2,f
   436  079D  2F98               	goto	u137
   437  079E  2F9F               	nop2
   438                           
   439                           ;main.c: 36: msg[0] = 'W';
   440  079F  3057               	movlw	87
   441  07A0  00F5               	movwf	??_main
   442  07A1  0875               	movf	??_main,w
   443  07A2  1283               	bcf	3,5	;RP0=0, select bank0
   444  07A3  1303               	bcf	3,6	;RP1=0, select bank0
   445  07A4  00CE               	movwf	main@msg
   446                           
   447                           ;main.c: 37: writeStringUSART(msg, 5);
   448  07A5  3005               	movlw	5
   449  07A6  00F5               	movwf	??_main
   450  07A7  0875               	movf	??_main,w
   451  07A8  00F1               	movwf	writeStringUSART@tam
   452  07A9  304E               	movlw	(low (main@msg| 0))& (0+255)
   453  07AA  120A  118A  265D  120A  118A  	fcall	_writeStringUSART
   454                           
   455                           ;main.c: 38: pageWrite(data, 19);
   456  07AF  3013               	movlw	19
   457  07B0  00F5               	movwf	??_main
   458  07B1  0875               	movf	??_main,w
   459  07B2  00F0               	movwf	pageWrite@tam
   460  07B3  303A               	movlw	(low (main@data| 0))& (0+255)
   461  07B4  120A  118A  268E  120A  118A  	fcall	_pageWrite
   462                           
   463                           ;main.c: 39: _delay((unsigned long)((500)*(4000000/4000.0)));
   464  07B9  3003               	movlw	3
   465  07BA  00F7               	movwf	??_main+2
   466  07BB  308A               	movlw	138
   467  07BC  00F6               	movwf	??_main+1
   468  07BD  3056               	movlw	86
   469  07BE  00F5               	movwf	??_main
   470  07BF                     u147:	
   471  07BF  0BF5               	decfsz	??_main,f
   472  07C0  2FBF               	goto	u147
   473  07C1  0BF6               	decfsz	??_main+1,f
   474  07C2  2FBF               	goto	u147
   475  07C3  0BF7               	decfsz	??_main+2,f
   476  07C4  2FBF               	goto	u147
   477  07C5  2FC6               	nop2
   478                           
   479                           ;main.c: 42: msg[0] = 'R';
   480  07C6  3052               	movlw	82
   481  07C7  00F5               	movwf	??_main
   482  07C8  0875               	movf	??_main,w
   483  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   484  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   485  07CB  00CE               	movwf	main@msg
   486  07CC                     l850:	
   487                           ;main.c: 43: while (1) {
   488                           
   489                           
   490                           ;main.c: 44: writeStringUSART(msg, 5);
   491  07CC  3005               	movlw	5
   492  07CD  00F5               	movwf	??_main
   493  07CE  0875               	movf	??_main,w
   494  07CF  00F1               	movwf	writeStringUSART@tam
   495  07D0  304E               	movlw	(low (main@msg| 0))& (0+255)
   496  07D1  120A  118A  265D  120A  118A  	fcall	_writeStringUSART
   497                           
   498                           ;main.c: 45: randomRead(19);
   499  07D6  3013               	movlw	19
   500  07D7  120A  118A  26E4  120A  118A  	fcall	_randomRead
   501                           
   502                           ;main.c: 46: writeUSART('\n');
   503  07DC  300A               	movlw	10
   504  07DD  120A  118A  2626  120A  118A  	fcall	_writeUSART
   505                           
   506                           ;main.c: 47: _delay((unsigned long)((2000)*(4000000/4000.0)));
   507  07E2  300B               	movlw	11
   508  07E3  00F7               	movwf	??_main+2
   509  07E4  3026               	movlw	38
   510  07E5  00F6               	movwf	??_main+1
   511  07E6  3066               	movlw	102
   512  07E7  00F5               	movwf	??_main
   513  07E8                     u157:	
   514  07E8  0BF5               	decfsz	??_main,f
   515  07E9  2FE8               	goto	u157
   516  07EA  0BF6               	decfsz	??_main+1,f
   517  07EB  2FE8               	goto	u157
   518  07EC  0BF7               	decfsz	??_main+2,f
   519  07ED  2FE8               	goto	u157
   520  07EE  2FEF               	nop2
   521  07EF  2FCC               	goto	l850
   522  07F0                     __end_of_main:	
   523                           
   524                           	psect	text1
   525  065D                     __ptext1:	
   526 ;; *************** function _writeStringUSART *****************
   527 ;; Defined at:
   528 ;;		line 190 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  dato            1    wreg     PTR unsigned char 
   531 ;;		 -> main@msg(6), 
   532 ;;  tam             1    1[COMMON] unsigned char 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;  dato            1    3[COMMON] PTR unsigned char 
   535 ;;		 -> main@msg(6), 
   536 ;;  c               1    4[COMMON] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;		None               void
   539 ;; Registers used:
   540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   546 ;;      Params:         1       0       0       0       0
   547 ;;      Locals:         2       0       0       0       0
   548 ;;      Temps:          1       0       0       0       0
   549 ;;      Totals:         4       0       0       0       0
   550 ;;Total ram usage:        4 bytes
   551 ;; Hardware stack levels used:    1
   552 ;; Hardware stack levels required when called:    1
   553 ;; This function calls:
   554 ;;		_writeUSART
   555 ;; This function is called by:
   556 ;;		_main
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           
   561                           ;psect for function _writeStringUSART
   562  065D                     _writeStringUSART:	
   563                           
   564                           ;incstack = 0
   565                           ; Regs used in _writeStringUSART: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   566                           ;writeStringUSART@dato stored from wreg
   567  065D  00F3               	movwf	writeStringUSART@dato
   568                           
   569                           ;main.c: 191: for (unsigned char c = 0; c < tam; c++) {
   570  065E  01F4               	clrf	writeStringUSART@c
   571  065F                     l736:	
   572  065F  0871               	movf	writeStringUSART@tam,w
   573  0660  0274               	subwf	writeStringUSART@c,w
   574  0661  1803               	btfsc	3,0
   575  0662  0008               	return
   576                           
   577                           ;main.c: 192: writeUSART(dato[c]);
   578  0663  0874               	movf	writeStringUSART@c,w
   579  0664  0773               	addwf	writeStringUSART@dato,w
   580  0665  00F2               	movwf	??_writeStringUSART
   581  0666  0872               	movf	??_writeStringUSART,w
   582  0667  0084               	movwf	4
   583  0668  1383               	bcf	3,7	;select IRP bank0
   584  0669  0800               	movf	0,w
   585  066A  120A  118A  2626  120A  118A  	fcall	_writeUSART
   586  066F  3001               	movlw	1
   587  0670  00F2               	movwf	??_writeStringUSART
   588  0671  0872               	movf	??_writeStringUSART,w
   589  0672  07F4               	addwf	writeStringUSART@c,f
   590  0673  2E5F               	goto	l736
   591  0674                     __end_of_writeStringUSART:	
   592                           
   593                           	psect	text2
   594  06E4                     __ptext2:	
   595 ;; *************** function _randomRead *****************
   596 ;; Defined at:
   597 ;;		line 127 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  tam             1    wreg     unsigned char 
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  tam             1    2[COMMON] unsigned char 
   602 ;;  i               1    3[COMMON] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;		None               void
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, pclath, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   612 ;;      Params:         0       0       0       0       0
   613 ;;      Locals:         2       0       0       0       0
   614 ;;      Temps:          1       0       0       0       0
   615 ;;      Totals:         3       0       0       0       0
   616 ;;Total ram usage:        3 bytes
   617 ;; Hardware stack levels used:    1
   618 ;; Hardware stack levels required when called:    1
   619 ;; This function calls:
   620 ;;		_setACK
   621 ;;		_setNACK
   622 ;;		_waitMSSP
   623 ;;		_writeUSART
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           
   630                           ;psect for function _randomRead
   631  06E4                     _randomRead:	
   632                           
   633                           ;incstack = 0
   634                           ; Regs used in _randomRead: [wreg+status,2+status,0+pclath+cstack]
   635                           ;randomRead@tam stored from wreg
   636  06E4  00F2               	movwf	randomRead@tam
   637                           
   638                           ;main.c: 128: unsigned char i;
   639                           ;main.c: 129: for (i = 0; i < tam; i++) {
   640  06E5  01F3               	clrf	randomRead@i
   641  06E6                     l826:	
   642  06E6  0872               	movf	randomRead@tam,w
   643  06E7  0273               	subwf	randomRead@i,w
   644  06E8  1803               	btfsc	3,0
   645  06E9  0008               	return
   646                           
   647                           ;main.c: 131: SEN = 1;
   648  06EA  1683               	bsf	3,5	;RP0=1, select bank1
   649  06EB  1303               	bcf	3,6	;RP1=0, select bank1
   650  06EC  1411               	bsf	17,0	;volatile
   651                           
   652                           ;main.c: 132: waitMSSP();
   653  06ED  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   654                           
   655                           ;main.c: 135: SSPBUF = 0xAE;
   656  06F2  30AE               	movlw	174
   657  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   658  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   659  06F5  0093               	movwf	19	;volatile
   660                           
   661                           ;main.c: 136: setACK();
   662  06F6  120A  118A  2614  120A  118A  	fcall	_setACK
   663                           
   664                           ;main.c: 137: waitMSSP();
   665  06FB  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   666                           
   667                           ;main.c: 140: SSPBUF = 0x00;
   668  0700  1283               	bcf	3,5	;RP0=0, select bank0
   669  0701  1303               	bcf	3,6	;RP1=0, select bank0
   670  0702  0193               	clrf	19	;volatile
   671                           
   672                           ;main.c: 141: setACK();
   673  0703  120A  118A  2614  120A  118A  	fcall	_setACK
   674                           
   675                           ;main.c: 142: waitMSSP();
   676  0708  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   677                           
   678                           ;main.c: 143: SSPBUF = i;
   679  070D  0873               	movf	randomRead@i,w
   680  070E  1283               	bcf	3,5	;RP0=0, select bank0
   681  070F  1303               	bcf	3,6	;RP1=0, select bank0
   682  0710  0093               	movwf	19	;volatile
   683                           
   684                           ;main.c: 144: setACK();
   685  0711  120A  118A  2614  120A  118A  	fcall	_setACK
   686                           
   687                           ;main.c: 145: waitMSSP();
   688  0716  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   689                           
   690                           ;main.c: 148: SEN = 1;
   691  071B  1683               	bsf	3,5	;RP0=1, select bank1
   692  071C  1303               	bcf	3,6	;RP1=0, select bank1
   693  071D  1411               	bsf	17,0	;volatile
   694                           
   695                           ;main.c: 149: waitMSSP();
   696  071E  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   697                           
   698                           ;main.c: 152: SSPBUF = 0xAF;
   699  0723  30AF               	movlw	175
   700  0724  1283               	bcf	3,5	;RP0=0, select bank0
   701  0725  1303               	bcf	3,6	;RP1=0, select bank0
   702  0726  0093               	movwf	19	;volatile
   703                           
   704                           ;main.c: 153: setACK();
   705  0727  120A  118A  2614  120A  118A  	fcall	_setACK
   706                           
   707                           ;main.c: 154: waitMSSP();
   708  072C  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   709                           
   710                           ;main.c: 157: RCEN = 1;
   711  0731  1683               	bsf	3,5	;RP0=1, select bank1
   712  0732  1303               	bcf	3,6	;RP1=0, select bank1
   713  0733  1591               	bsf	17,3	;volatile
   714                           
   715                           ;main.c: 158: waitMSSP();
   716  0734  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   717                           
   718                           ;main.c: 161: setNACK();
   719  0739  120A  118A  2619  120A  118A  	fcall	_setNACK
   720                           
   721                           ;main.c: 164: PEN = 1;
   722  073E  1683               	bsf	3,5	;RP0=1, select bank1
   723  073F  1303               	bcf	3,6	;RP1=0, select bank1
   724  0740  1511               	bsf	17,2	;volatile
   725                           
   726                           ;main.c: 165: waitMSSP();
   727  0741  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   728                           
   729                           ;main.c: 168: writeUSART(SSPBUF);
   730  0746  1283               	bcf	3,5	;RP0=0, select bank0
   731  0747  1303               	bcf	3,6	;RP1=0, select bank0
   732  0748  0813               	movf	19,w	;volatile
   733  0749  120A  118A  2626  120A  118A  	fcall	_writeUSART
   734                           
   735                           ;main.c: 169: __nop();
   736  074E  0000               	nop
   737  074F  3001               	movlw	1
   738  0750  00F1               	movwf	??_randomRead
   739  0751  0871               	movf	??_randomRead,w
   740  0752  07F3               	addwf	randomRead@i,f
   741  0753  2EE6               	goto	l826
   742  0754                     __end_of_randomRead:	
   743                           
   744                           	psect	text3
   745  0626                     __ptext3:	
   746 ;; *************** function _writeUSART *****************
   747 ;; Defined at:
   748 ;;		line 183 in file "main.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;  dato            1    wreg     unsigned char 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  dato            1    0[COMMON] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;		None               void
   755 ;; Registers used:
   756 ;;		wreg
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         0       0       0       0       0
   763 ;;      Locals:         1       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0
   765 ;;      Totals:         1       0       0       0       0
   766 ;;Total ram usage:        1 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_main
   772 ;;		_randomRead
   773 ;;		_writeStringUSART
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           
   778                           ;psect for function _writeUSART
   779  0626                     _writeUSART:	
   780                           
   781                           ;incstack = 0
   782                           ; Regs used in _writeUSART: [wreg]
   783                           ;writeUSART@dato stored from wreg
   784  0626  00F0               	movwf	writeUSART@dato
   785  0627                     l93:	
   786                           ;main.c: 184: while (TXIF == 0) {
   787                           
   788  0627  1283               	bcf	3,5	;RP0=0, select bank0
   789  0628  1303               	bcf	3,6	;RP1=0, select bank0
   790  0629  1A0C               	btfsc	12,4	;volatile
   791  062A  2E2D               	goto	l712
   792                           
   793                           ;main.c: 185: __nop();
   794  062B  0000               	nop
   795  062C  2E27               	goto	l93
   796  062D                     l712:	
   797                           
   798                           ;main.c: 186: }
   799                           ;main.c: 187: TXREG = dato;
   800  062D  0870               	movf	writeUSART@dato,w
   801  062E  0099               	movwf	25	;volatile
   802  062F  0008               	return
   803  0630                     __end_of_writeUSART:	
   804                           
   805                           	psect	text4
   806  0619                     __ptext4:	
   807 ;; *************** function _setNACK *****************
   808 ;; Defined at:
   809 ;;		line 88 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;		None
   814 ;; Return value:  Size  Location     Type
   815 ;;		None               void
   816 ;; Registers used:
   817 ;;		None
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   823 ;;      Params:         0       0       0       0       0
   824 ;;      Locals:         0       0       0       0       0
   825 ;;      Temps:          0       0       0       0       0
   826 ;;      Totals:         0       0       0       0       0
   827 ;;Total ram usage:        0 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_randomRead
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           
   837                           ;psect for function _setNACK
   838  0619                     _setNACK:	
   839                           
   840                           ;main.c: 89: ACKDT = 1;
   841                           
   842                           ;incstack = 0
   843                           ; Regs used in _setNACK: []
   844  0619  1683               	bsf	3,5	;RP0=1, select bank1
   845  061A  1303               	bcf	3,6	;RP1=0, select bank1
   846  061B  1691               	bsf	17,5	;volatile
   847                           
   848                           ;main.c: 90: ACKEN = 1;
   849  061C  1611               	bsf	17,4	;volatile
   850  061D  0008               	return
   851  061E                     __end_of_setNACK:	
   852                           
   853                           	psect	text5
   854  068E                     __ptext5:	
   855 ;; *************** function _pageWrite *****************
   856 ;; Defined at:
   857 ;;		line 95 in file "main.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  data            1    wreg     PTR unsigned char 
   860 ;;		 -> main@data(20), 
   861 ;;  tam             1    0[COMMON] unsigned char 
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  data            1    2[COMMON] PTR unsigned char 
   864 ;;		 -> main@data(20), 
   865 ;;  i               1    3[COMMON] unsigned char 
   866 ;; Return value:  Size  Location     Type
   867 ;;		None               void
   868 ;; Registers used:
   869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   875 ;;      Params:         1       0       0       0       0
   876 ;;      Locals:         2       0       0       0       0
   877 ;;      Temps:          1       0       0       0       0
   878 ;;      Totals:         4       0       0       0       0
   879 ;;Total ram usage:        4 bytes
   880 ;; Hardware stack levels used:    1
   881 ;; Hardware stack levels required when called:    1
   882 ;; This function calls:
   883 ;;		_setACK
   884 ;;		_waitMSSP
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           
   891                           ;psect for function _pageWrite
   892  068E                     _pageWrite:	
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _pageWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   896                           ;pageWrite@data stored from wreg
   897  068E  00F2               	movwf	pageWrite@data
   898                           
   899                           ;main.c: 98: SEN = 1;
   900  068F  1683               	bsf	3,5	;RP0=1, select bank1
   901  0690  1303               	bcf	3,6	;RP1=0, select bank1
   902  0691  1411               	bsf	17,0	;volatile
   903                           
   904                           ;main.c: 99: waitMSSP();
   905  0692  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   906                           
   907                           ;main.c: 102: SSPBUF = 0xAE;
   908  0697  30AE               	movlw	174
   909  0698  1283               	bcf	3,5	;RP0=0, select bank0
   910  0699  1303               	bcf	3,6	;RP1=0, select bank0
   911  069A  0093               	movwf	19	;volatile
   912                           
   913                           ;main.c: 103: setACK();
   914  069B  120A  118A  2614  120A  118A  	fcall	_setACK
   915                           
   916                           ;main.c: 104: waitMSSP();
   917  06A0  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   918                           
   919                           ;main.c: 107: SSPBUF = 0x00;
   920  06A5  1283               	bcf	3,5	;RP0=0, select bank0
   921  06A6  1303               	bcf	3,6	;RP1=0, select bank0
   922  06A7  0193               	clrf	19	;volatile
   923                           
   924                           ;main.c: 108: setACK();
   925  06A8  120A  118A  2614  120A  118A  	fcall	_setACK
   926                           
   927                           ;main.c: 109: waitMSSP();
   928  06AD  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   929                           
   930                           ;main.c: 110: SSPBUF = 0x00;
   931  06B2  1283               	bcf	3,5	;RP0=0, select bank0
   932  06B3  1303               	bcf	3,6	;RP1=0, select bank0
   933  06B4  0193               	clrf	19	;volatile
   934                           
   935                           ;main.c: 111: setACK();
   936  06B5  120A  118A  2614  120A  118A  	fcall	_setACK
   937                           
   938                           ;main.c: 112: waitMSSP();
   939  06BA  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   940                           
   941                           ;main.c: 115: for (unsigned char i = 0; i < tam; i++) {
   942  06BF  01F3               	clrf	pageWrite@i
   943  06C0                     l774:	
   944  06C0  0870               	movf	pageWrite@tam,w
   945  06C1  0273               	subwf	pageWrite@i,w
   946  06C2  1803               	btfsc	3,0
   947  06C3  2EDD               	goto	l80
   948                           
   949                           ;main.c: 116: SSPBUF = data[i];
   950  06C4  0873               	movf	pageWrite@i,w
   951  06C5  0772               	addwf	pageWrite@data,w
   952  06C6  00F1               	movwf	??_pageWrite
   953  06C7  0871               	movf	??_pageWrite,w
   954  06C8  0084               	movwf	4
   955  06C9  1383               	bcf	3,7	;select IRP bank0
   956  06CA  0800               	movf	0,w
   957  06CB  1283               	bcf	3,5	;RP0=0, select bank0
   958  06CC  1303               	bcf	3,6	;RP1=0, select bank0
   959  06CD  0093               	movwf	19	;volatile
   960                           
   961                           ;main.c: 117: setACK();
   962  06CE  120A  118A  2614  120A  118A  	fcall	_setACK
   963                           
   964                           ;main.c: 118: waitMSSP();
   965  06D3  120A  118A  261E  120A  118A  	fcall	_waitMSSP
   966  06D8  3001               	movlw	1
   967  06D9  00F1               	movwf	??_pageWrite
   968  06DA  0871               	movf	??_pageWrite,w
   969  06DB  07F3               	addwf	pageWrite@i,f
   970  06DC  2EC0               	goto	l774
   971  06DD                     l80:	
   972                           
   973                           ;main.c: 119: }
   974                           ;main.c: 123: PEN = 1;
   975  06DD  1683               	bsf	3,5	;RP0=1, select bank1
   976  06DE  1303               	bcf	3,6	;RP1=0, select bank1
   977  06DF  1511               	bsf	17,2	;volatile
   978                           
   979                           ;main.c: 124: waitMSSP();
   980  06E0  120A  118A  261E   	fcall	_waitMSSP
   981  06E3  0008               	return
   982  06E4                     __end_of_pageWrite:	
   983                           
   984                           	psect	text6
   985  061E                     __ptext6:	
   986 ;; *************** function _waitMSSP *****************
   987 ;; Defined at:
   988 ;;		line 66 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;		None               void
   995 ;; Registers used:
   996 ;;		None
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1002 ;;      Params:         0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_pageWrite
  1012 ;;		_randomRead
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _waitMSSP
  1018  061E                     _waitMSSP:	
  1019  061E                     l66:	
  1020                           ;main.c: 73: while (!SSPIF) {
  1021                           
  1022                           ;incstack = 0
  1023                           ; Regs used in _waitMSSP: []
  1024                           
  1025  061E  1283               	bcf	3,5	;RP0=0, select bank0
  1026  061F  1303               	bcf	3,6	;RP1=0, select bank0
  1027  0620  198C               	btfsc	12,3	;volatile
  1028  0621  2E24               	goto	l68
  1029                           
  1030                           ;main.c: 77: __nop();
  1031  0622  0000               	nop
  1032  0623  2E1E               	goto	l66
  1033  0624                     l68:	
  1034                           
  1035                           ;main.c: 78: };
  1036                           ;main.c: 80: SSPIF = 0;
  1037  0624  118C               	bcf	12,3	;volatile
  1038  0625  0008               	return
  1039  0626                     __end_of_waitMSSP:	
  1040                           
  1041                           	psect	text7
  1042  0614                     __ptext7:	
  1043 ;; *************** function _setACK *****************
  1044 ;; Defined at:
  1045 ;;		line 83 in file "main.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;		None               void
  1052 ;; Registers used:
  1053 ;;		None
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1059 ;;      Params:         0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0
  1062 ;;      Totals:         0       0       0       0       0
  1063 ;;Total ram usage:        0 bytes
  1064 ;; Hardware stack levels used:    1
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_pageWrite
  1069 ;;		_randomRead
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           
  1074                           ;psect for function _setACK
  1075  0614                     _setACK:	
  1076                           
  1077                           ;main.c: 84: ACKDT = 0;
  1078                           
  1079                           ;incstack = 0
  1080                           ; Regs used in _setACK: []
  1081  0614  1683               	bsf	3,5	;RP0=1, select bank1
  1082  0615  1303               	bcf	3,6	;RP1=0, select bank1
  1083  0616  1291               	bcf	17,5	;volatile
  1084                           
  1085                           ;main.c: 85: ACKEN = 1;
  1086  0617  1611               	bsf	17,4	;volatile
  1087  0618  0008               	return
  1088  0619                     __end_of_setACK:	
  1089                           
  1090                           	psect	text8
  1091  0630                     __ptext8:	
  1092 ;; *************** function _initUSART *****************
  1093 ;; Defined at:
  1094 ;;		line 175 in file "main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;		None               void
  1101 ;; Registers used:
  1102 ;;		wreg
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1108 ;;      Params:         0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           
  1122                           ;psect for function _initUSART
  1123  0630                     _initUSART:	
  1124                           
  1125                           ;main.c: 176: SPBRG = 25;
  1126                           
  1127                           ;incstack = 0
  1128                           ; Regs used in _initUSART: [wreg]
  1129  0630  3019               	movlw	25
  1130  0631  1683               	bsf	3,5	;RP0=1, select bank1
  1131  0632  1303               	bcf	3,6	;RP1=0, select bank1
  1132  0633  0099               	movwf	25	;volatile
  1133                           
  1134                           ;main.c: 177: RCSTAbits.SPEN = 1;
  1135  0634  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0635  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0636  1798               	bsf	24,7	;volatile
  1138                           
  1139                           ;main.c: 178: RCSTAbits.CREN = 1;
  1140  0637  1618               	bsf	24,4	;volatile
  1141                           
  1142                           ;main.c: 179: TXSTAbits.TXEN = 1;
  1143  0638  1683               	bsf	3,5	;RP0=1, select bank1
  1144  0639  1303               	bcf	3,6	;RP1=0, select bank1
  1145  063A  1698               	bsf	24,5	;volatile
  1146                           
  1147                           ;main.c: 180: TXSTAbits.BRGH = 1;
  1148  063B  1518               	bsf	24,2	;volatile
  1149  063C  0008               	return
  1150  063D                     __end_of_initUSART:	
  1151                           
  1152                           	psect	text9
  1153  063D                     __ptext9:	
  1154 ;; *************** function _initI2C *****************
  1155 ;; Defined at:
  1156 ;;		line 53 in file "main.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;		None               void
  1163 ;; Registers used:
  1164 ;;		wreg
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1170 ;;      Params:         0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0
  1172 ;;      Temps:          0       0       0       0       0
  1173 ;;      Totals:         0       0       0       0       0
  1174 ;;Total ram usage:        0 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function _initI2C
  1185  063D                     _initI2C:	
  1186                           
  1187                           ;main.c: 55: TRISC3 = 1;
  1188                           
  1189                           ;incstack = 0
  1190                           ; Regs used in _initI2C: [wreg]
  1191  063D  1683               	bsf	3,5	;RP0=1, select bank1
  1192  063E  1303               	bcf	3,6	;RP1=0, select bank1
  1193  063F  1587               	bsf	7,3	;volatile
  1194                           
  1195                           ;main.c: 56: TRISC4 = 1;
  1196  0640  1607               	bsf	7,4	;volatile
  1197                           
  1198                           ;main.c: 59: SSPCON = 0x28;
  1199  0641  3028               	movlw	40
  1200  0642  1283               	bcf	3,5	;RP0=0, select bank0
  1201  0643  1303               	bcf	3,6	;RP1=0, select bank0
  1202  0644  0094               	movwf	20	;volatile
  1203                           
  1204                           ;main.c: 61: SSPADD = 9;
  1205  0645  3009               	movlw	9
  1206  0646  1683               	bsf	3,5	;RP0=1, select bank1
  1207  0647  1303               	bcf	3,6	;RP1=0, select bank1
  1208  0648  0093               	movwf	19	;volatile
  1209                           
  1210                           ;main.c: 63: SSPSTAT = 80;
  1211  0649  3050               	movlw	80
  1212  064A  0094               	movwf	20	;volatile
  1213  064B  0008               	return
  1214  064C                     __end_of_initI2C:	
  1215  007E                     btemp	set	126	;btemp
  1216  007E                     wtemp	set	126
  1217  007E                     wtemp0	set	126
  1218  0080                     wtemp1	set	128
  1219  0082                     wtemp2	set	130
  1220  0084                     wtemp3	set	132
  1221  0086                     wtemp4	set	134
  1222  0088                     wtemp5	set	136
  1223  007F                     wtemp6	set	127
  1224  007E                     ttemp	set	126
  1225  007E                     ttemp0	set	126
  1226  0081                     ttemp1	set	129
  1227  0084                     ttemp2	set	132
  1228  0087                     ttemp3	set	135
  1229  007F                     ttemp4	set	127
  1230  007E                     ltemp	set	126
  1231  007E                     ltemp0	set	126
  1232  0082                     ltemp1	set	130
  1233  0086                     ltemp2	set	134
  1234  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        26
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80     26      52
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    writeStringUSART@dato	PTR unsigned char  size(1) Largest target is 6
		 -> main@msg(BANK0[6]), 

    pageWrite@data	PTR unsigned char  size(1) Largest target is 20
		 -> main@data(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_writeStringUSART
    _writeStringUSART->_writeUSART
    _randomRead->_writeUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0     728
                                              5 COMMON     4     4      0
                                              0 BANK0     26    26      0
                            _initI2C
                          _initUSART
                          _pageWrite
                         _randomRead
                   _writeStringUSART
                         _writeUSART
 ---------------------------------------------------------------------------------
 (1) _writeStringUSART                                     4     3      1     352
                                              1 COMMON     4     3      1
                         _writeUSART
 ---------------------------------------------------------------------------------
 (1) _randomRead                                           3     3      0      90
                                              1 COMMON     3     3      0
                             _setACK
                            _setNACK
                           _waitMSSP
                         _writeUSART
 ---------------------------------------------------------------------------------
 (1) _writeUSART                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setNACK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pageWrite                                            4     3      1     170
                                              0 COMMON     4     3      1
                             _setACK
                           _waitMSSP
 ---------------------------------------------------------------------------------
 (2) _waitMSSP                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setACK                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initI2C
   _initUSART
   _pageWrite
     _setACK
     _waitMSSP
   _randomRead
     _setACK
     _setNACK
     _waitMSSP
     _writeUSART
   _writeStringUSART
     _writeUSART
   _writeUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      34       5       65.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D      12        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Dec 10 23:08:56 2018

                        pc 0002                         l80 06DD                         l66 061E  
                       l68 0624                         l93 0627                         fsr 0004  
                      l712 062D                        l736 065F                        l826 06E6  
                      l850 07CC                        l774 06C0                        u120 075C  
                      u137 0798                        u147 07BF                        u157 07E8  
                      _PEN 048A                        _SEN 0488                        fsr0 0004  
                      indf 0000                       _RCEN 048B                       _TXIF 0064  
                     _main 0754           _writeStringUSART 065D                       btemp 007E  
                     ltemp 007E                       start 0000                       ttemp 007E  
                     wtemp 007E                      ?_main 0070                      _ACKEN 048C  
                    _ACKDT 048D              __CFG_WDTE$OFF 0000                      _SPBRG 0099  
                    _SSPIF 0063                      _TXREG 0019            __end_of_initI2C 064C  
          __end_of_setNACK 061E                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F            __initialization 07F0               __end_of_main 07F0  
                   ??_main 0075        writeStringUSART@tam 0071                     _SSPADD 0093  
                   _TRISC3 043B                     _TRISC4 043C                     _SSPCON 0014  
                   _SSPBUF 0013              randomRead@tam 0072                     _setACK 0614  
                ??_initI2C 0070           __end_of_waitMSSP 0626                  ??_setNACK 0070  
  __end_of__initialization 07FC             __pcstackCOMMON 0070               __pidataBANK0 0674  
 __end_of_writeStringUSART 0674               pageWrite@tam 0070                randomRead@i 0073  
     writeStringUSART@dato 0073         __size_of_initUSART 000D         __size_of_pageWrite 0056  
               __pmaintext 0754                    ?_setACK 0070                    _SSPSTAT 0094  
                ?_waitMSSP 0070            __size_of_setACK 0005          __end_of_initUSART 063D  
        __end_of_pageWrite 06E4                    __ptext1 065D                    __ptext2 06E4  
                  __ptext3 0626                    __ptext4 0619                    __ptext5 068E  
                  __ptext6 061E                    __ptext7 0614                    __ptext8 0630  
                  __ptext9 063D                    _initI2C 063D                    _setNACK 0619  
               _randomRead 06E4                    main@msg 004E       end_of_initialization 07FC  
               ??_waitMSSP 0070                  _RCSTAbits 0018                  _TXSTAbits 0098  
        writeStringUSART@c 0074                 _writeUSART 0626             __end_of_setACK 0619  
        ?_writeStringUSART 0071        start_initialization 07F0         ??_writeStringUSART 0072  
              ?_randomRead 0070                 pageWrite@i 0073              pageWrite@data 0072  
               init_fetch0 064C                __pdataBANK0 0020                   ??_setACK 0070  
                ___latbits 0002              __pcstackBANK0 003A     __CFG_FOSC$INTRC_CLKOUT 0000  
      __size_of_randomRead 0070                ?_writeUSART 0070          __size_of_waitMSSP 0008  
                 ?_initI2C 0070                   ?_setNACK 0070                  _initUSART 0630  
                _pageWrite 068E                  main@F1727 0020                  main@F1729 0034  
               ?_initUSART 0070                 ?_pageWrite 0070        __size_of_writeUSART 000A  
           writeUSART@dato 0070           __size_of_initI2C 000F           __size_of_setNACK 0005  
             ??_randomRead 0071              __size_of_main 009C  __size_of_writeStringUSART 0017  
                 _waitMSSP 061E         __end_of_randomRead 0754                   main@data 003A  
              ??_initUSART 0070                ??_pageWrite 0071                   init_ram0 0650  
             ??_writeUSART 0070         __end_of_writeUSART 0630  
